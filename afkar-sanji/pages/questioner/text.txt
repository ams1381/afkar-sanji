  const [userData, setUserData] = useState([
        {
            first_name: undefined,
            last_name: undefined,
            email: undefined,
            gender: undefined,
            address: undefined,
            nationality: undefined,
            province: undefined
        }
    ])


    const [errors, setErrors] = useState([]);
    useEffect(() => {
        setErrors([]);
        const result = informationSchema.validate(
            userData
        );
        console.log(result)
        // setErrors(
        //     result.error?.details?.length > 0
        //         ? result.error?.details?.map((err) => err.message)
        //         : []
        // );
    }, [userData]);

    useEffect(() => {
        console.log(userData)
    }, [userData]);


    useEffect(() => {
        errors.forEach(err => {
            message.error('casdgfnh')
        })
    }, [errors]);


    // state for values
    // const [userData, setUserData] = useState([])
    const [name, setName] = useState('')
    const [family, setFamily] = useState('')
    const [email, setEmail] = useState('')
    const [countrySelect, setcountrySelect] = useState('')
    const [provinceSelect, setprovinceSelect] = useState('')
    const [gender, setGender] = useState('')
    const [address, setAddress] = useState('')
    const [country, setCountry] = useState('')
    const [province, setProvince] = useState('')
    const [loadingState, setLoadingState] = useState(false)
    const [isOk, setIsOk] = useState(false)
    const [isDisable, setIsDisable] = useState(false)
    const [year, setYear] = useState(yearDete)
    const [genders, setGenders] = useState([{
        value: 'f', label: 'زن',
    }, {
        value: 'm', label: 'مرد',
    },])

    // email validation
    const emailRegex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/


    const {data, isLoading, error, refetch} = useQuery(['Me'],
        async () => await axiosInstance.get('/user-api/users/me/'))

        console.log(data?.data);

    useEffect(() => {
        if (
            name !== data?.first_name ||
            family !== data?.last_name ||
            gender !== data?.gender ||
            email !== data?.email ||
            address !== data?.address ||
            country !== data?.natinality ||
            province !== data?.province
        ) {
            setIsOk(true)
            setIsDisable(true);
        } else {
            setIsOk(false)
            setIsDisable(false);
        }
    }, [name,
        family,
        email,
        address,
        country,
        province, gender]);


    useEffect(() => {

    }, []);


    const submit = (e) => {
        let fromData = new FormData()
        // append
        fromData.append('first_name', name)
        fromData.append('last_name', family)
        fromData.append('gender', gender)
        fromData.append('email', email)
        fromData.append('address', address)
        fromData.append('nationality', '1')
        fromData.append('province', '1')
        // if state was ok send req
        if (!emailRegex.test(email)) message.error('ایمیل وارد شده نامعتبر است');
        if (isOk)
            setLoadingState(true)
            axiosInstance.patch('/user-api/users/me/', fromData).then(res => {
            message.success('با موفقیت انجام شد')
            // false loading
            setLoadingState(false)
        }).catch(err => {
            if (err === 400) {
                message.error('مشکلی پیش آمده داریم بررسی میکنیم')
            }
            setLoadingState(false)
        })

    }