import Link from 'next/link'
import React, {useState} from 'react'
import Head from "next/head";
import {PageBox, QuestionerPageContainer , QuestionerContentBox } from "@/styles/common";
import {CommonDrawer} from "@/components/common/CommonDrawer";
import QuestionerHeader from "@/components/common/QuestionerHeader";
import {axiosInstance} from "@/utilities/axios";

const AddResultPage = ({ questionnaire }) => {
    const [ RightDrawerOpen , setRightDrawerOpen ] = useState(false);
    console.log(questionnaire)
    return <>
        <Head>
            <title>Afkar Sanji | Add Result</title>
            <meta name="description" content="Generated by create next app" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <link rel="icon" href="/favicon.ico" />
        </Head>
        <PageBox>
            <CommonDrawer RightDrawerOpen={RightDrawerOpen} setRightDrawerOpen={setRightDrawerOpen} />
            <main style={{ width : RightDrawerOpen ? '80%' : '100%', transition : '0.3s' }}>
                <QuestionerHeader pageName='add-result' />
                <QuestionerPageContainer>
                    <QuestionerContentBox>
                        {
                            questionnaire.questions.map(item => item?.question && <p>
                                {item.question.title}
                            </p>)
                        }
                    </QuestionerContentBox>
                </QuestionerPageContainer>
            </main>
        </PageBox>
    </>
}
export default AddResultPage;

export async function getServerSideProps(context) {
    const { req } = context;
    const cookies = req.headers.cookie;

    if (cookies) {
        // Parse the cookies
        const parsedCookies = cookies.split(';').reduce((acc, cookie) => {
            const [key, value] = cookie.trim().split('=');
            acc[key] = decodeURIComponent(value);
            return acc;
        }, {});
        let response  =  await
            fetch('https://mah-api.ariomotion.com/question-api/questionnaires/' + context.query.QuestionnaireUUID.replace('}',''),
                {
                    headers: {
                        Authorization: `Bearer ${parsedCookies.access_token}`,
                    },
                })
        const data = await response.json();

        return {
            props: {
                cookies: parsedCookies,
                questionnaire : data
            },
        };
    }

    return {
        redirect: {
            permanent: false,
            destination: "/auth"
        }
    };
}