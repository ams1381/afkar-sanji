import Head from "next/head";
import React, {useEffect, useState} from "react";
import {PageBox, QuestionerPageContainer} from "@/styles/common";
import {CommonDrawer} from "@/components/common/CommonDrawer";
import {Button, Checkbox, Select} from "antd";
import {DeleteRowButton, ResultBodyContainer, ResultTableContainer} from "@/styles/Result/ResultPage";
import {Icon} from "@/styles/icons";
import QuestionerHeader from "@/components/common/QuestionerHeader";
import {
    QuestionerResultChangerContainer,
    QuestionerResultHeader, RowSelectorContainer,
} from "@/styles/Result/QuestionerResult";
import {QuestionerResultHead} from "@/components/Questioner/Result/QuestionerResultHeader";
import {useQueries, useQuery} from "@tanstack/react-query";
import {axiosInstance} from "@/utilities/axios";
import {useRouter} from "next/router";
import {QuestionerResultBody} from "@/components/Questioner/Result/QuestionerResultBody";

const QuestionerResult = ({ meData }) => {
    const [ RightDrawerOpen , setRightDrawerOpen ] = useState(false);
    const router = useRouter();
    const [ SelectedRows , setSelectedRows ] = useState([]);
    const [ CurrentPage , SetCurrentPage ] = useState(1);
    const [ SelectedTypeFilter , setSelectedTypeFilter ] = useState([]);
    const [ QuestionnaireQuery , ResultQuery ] = useQueries({
        queries: [
            {
                queryKey: ['questionnaire'],
                queryFn: async () => await axiosInstance.get(`/question-api/questionnaires/${router.query.QuestionnaireUUID}/`),
                refetchOnWindowFocus : false
            },
            {
                queryKey: ['result'],
                queryFn: async () =>
                    await axiosInstance.get(`/result-api/${router.query.QuestionnaireUUID}/answer-sets/?answered_at=&end_date=&page=${CurrentPage}&start_date=`) ,
                refetchOnWindowFocus : false
            },
        ],
    });
    // console.log(ResultQuery.error)
    // useEffect(() => {
    //     if(ResultQuery.error && ResultQuery.error?.response?.status == 404)
    //         SetCurrentPage(CurrentPage - 1)
    // },[ResultQuery])
    useEffect(() => {
        ResultQuery.refetch()
        setSelectedRows([])
    },[CurrentPage])
    return <>
        <Head>
            <title>Afkar Sanji | Questioner Result </title>
            <meta name="description" content="Generated by create next app" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <link rel="icon" href="/favicon.ico" />
        </Head>
        <PageBox>
            <CommonDrawer RightDrawerOpen={RightDrawerOpen} setRightDrawerOpen={setRightDrawerOpen} />
            <main style={{ width : RightDrawerOpen ? '84%' : '100%', transition : '0.3s' }}>
                <QuestionerHeader pageName='result' meData={meData} />
                <QuestionerPageContainer style={{ height : '100vh' , overflow : 'hidden' , maxHeight : '690px' }}>
                        <QuestionerResultHead SelectedRows={SelectedRows}
                          setSelectedRows={setSelectedRows} CurrentPage={CurrentPage}
                          SetCurrentPage={SetCurrentPage}    ResultQuery={ResultQuery}
                          SelectedTypeFilter={SelectedTypeFilter} setSelectedTypeFilter={setSelectedTypeFilter}
                          questionnaireQuery={QuestionnaireQuery}/>
                    { ResultQuery.error && ResultQuery.error.response?.status == 500 ?
                        <ResultBodyContainer error={'active'}  style={{ height : '85%'  }}>
                            <ResultTableContainer >
                                <p>مشکل سمت سرور</p>
                            </ResultTableContainer>
                        </ResultBodyContainer>
                        : <QuestionerResultBody SetCurrentPage={SetCurrentPage} ResultQuery={ResultQuery}
                               SelectedRows={SelectedRows} setSelectedRows={setSelectedRows}
                               SelectedTypeFilter={SelectedTypeFilter}
                               QuestionnaireQuery={QuestionnaireQuery}/>}
                </QuestionerPageContainer>
            </main>
        </PageBox>
    </>
}
export default  QuestionerResult;
export async function getServerSideProps(context) {
    const { req } = context;
    const cookies = req.headers.cookie;
    let MeData;
    // Check if cookies are present
    if (cookies) {
        // Parse the cookies
        const parsedCookies = cookies.split(';').reduce((acc, cookie) => {
            const [key, value] = cookie.trim().split('=');
            acc[key] = decodeURIComponent(value);
            return acc;
        }, {});
        try {
            let MeResponse = await fetch('https://mah-api.ariomotion.com/user-api/users/me/',{
                headers : {
                    Authorization: `Bearer ${parsedCookies.access_token}`,
                }
            })
             MeData = await  MeResponse.json();
        }
        catch (err) {

        }
        return {
            props: {
                // Pass the cookies as props to the component
                cookies: parsedCookies,
                meData : MeData ? MeData : null
            },
        };
    }

    return {
        redirect: {
            permanent: false,
            destination: "/auth"
        }
    };
}